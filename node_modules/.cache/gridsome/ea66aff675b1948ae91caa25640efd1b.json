{"remainingRequest":"/Users/jwolff/Documents/dev/learning-vue/gridsome-wordpress/yo/vue-gridsome-graphql-wordpress/node_modules/babel-loader/lib/index.js??ref--1-1!/Users/jwolff/Documents/dev/learning-vue/gridsome-wordpress/yo/vue-gridsome-graphql-wordpress/node_modules/gridsome/app/fetch.js","dependencies":[{"path":"/Users/jwolff/Documents/dev/learning-vue/gridsome-wordpress/yo/vue-gridsome-graphql-wordpress/node_modules/gridsome/app/fetch.js","mtime":1564078520995},{"path":"/Users/jwolff/Documents/dev/learning-vue/gridsome-wordpress/yo/vue-gridsome-graphql-wordpress/node_modules/cache-loader/dist/cjs.js","mtime":1564078521043},{"path":"/Users/jwolff/Documents/dev/learning-vue/gridsome-wordpress/yo/vue-gridsome-graphql-wordpress/node_modules/babel-loader/lib/index.js","mtime":1564078521010}],"contextDependencies":[],"result":["import _slicedToArray from \"/Users/jwolff/Documents/dev/learning-vue/gridsome-wordpress/yo/vue-gridsome-graphql-wordpress/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport prefetch from \"./utils/prefetch\";\nimport { unslashEnd, stripPageParam } from \"./utils/helpers\";\nimport { NOT_FOUND_PATH } from '~/.temp/constants';\nvar dataUrl = process.env.DATA_URL;\nvar isPrefetched = {};\nvar isLoaded = {};\nexport default (function (route) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$shouldPrefet = options.shouldPrefetch,\n      shouldPrefetch = _options$shouldPrefet === void 0 ? false : _options$shouldPrefet,\n      _options$force = options.force,\n      force = _options$force === void 0 ? false : _options$force;\n\n  if (!route.meta.data) {\n    return Promise.resolve({\n      data: null,\n      context: {}\n    });\n  }\n\n  if (!process.isStatic) {\n    var getJSON = function getJSON(route) {\n      return new Promise(function (resolve, reject) {\n        fetch(process.env.GRAPHQL_ENDPOINT, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            page: route.params.page ? Number(route.params.page) : null,\n            path: route.name === '*' ? NOT_FOUND_PATH : stripPageParam(route)\n          })\n        }).then(function (res) {\n          return res.json();\n        }).then(resolve).catch(reject);\n      });\n    };\n\n    return new Promise(function (resolve, reject) {\n      if (force || !isLoaded[route.fullPath]) {\n        isLoaded[route.fullPath] = getJSON(route);\n      }\n\n      isLoaded[route.fullPath].then(function (res) {\n        if (res.errors) reject(res.errors[0]);else if (res.code) resolve({\n          code: res.code\n        });else resolve({\n          data: res.data,\n          context: res.extensions ? res.extensions.context : {}\n        });\n      }).catch(reject);\n    });\n  }\n\n  return new Promise(function (resolve, reject) {\n    var loadJSON = function loadJSON(_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          group = _ref2[0],\n          hash = _ref2[1];\n\n      var jsonPath = dataUrl + \"\".concat(group, \"/\").concat(hash, \".json\");\n\n      if (shouldPrefetch && !isLoaded[jsonPath]) {\n        if (!isPrefetched[jsonPath]) {\n          isPrefetched[jsonPath] = prefetch(jsonPath);\n        }\n\n        return isPrefetched[jsonPath].then(function () {\n          return resolve();\n        }).catch(function () {\n          return resolve();\n        });\n      }\n\n      if (!isLoaded[jsonPath]) {\n        isLoaded[jsonPath] = fetchJSON(jsonPath);\n      }\n\n      return isLoaded[jsonPath].then(function (res) {\n        if (res.errors) reject(res.errors[0]);else resolve(res);\n      }).catch(reject);\n    };\n\n    var name = route.name,\n        data = route.meta.data;\n    var usePath = name === '*' ? NOT_FOUND_PATH : route.path;\n    var path = unslashEnd(usePath) || '/';\n\n    if (typeof data === 'function') {\n      data().then(function (data) {\n        if (data[path]) loadJSON(data[path]);else resolve({\n          code: 404\n        });\n      }).catch(reject);\n    } else {\n      loadJSON(data);\n    }\n  });\n});\n\nfunction fetchJSON(jsonPath) {\n  return new Promise(function (resolve, reject) {\n    var req = new XMLHttpRequest();\n    req.open('GET', jsonPath, true);\n    req.withCredentials = true;\n\n    req.onload = function () {\n      switch (req.status) {\n        case 200:\n          {\n            var results;\n\n            try {\n              results = JSON.parse(req.responseText);\n            } catch (err) {\n              return reject(new Error(\"Failed to parse JSON from \".concat(jsonPath, \". \").concat(err.message, \".\")));\n            }\n\n            return resolve(results);\n          }\n\n        case 404:\n          {\n            var error = new Error(req.statusText);\n            error.code = req.status;\n            return reject(error);\n          }\n      }\n\n      reject(new Error(\"Failed to fetch \".concat(jsonPath, \".\")));\n    };\n\n    req.send(null);\n  });\n}",null]}